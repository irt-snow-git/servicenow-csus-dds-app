<?xml version="1.0" encoding="UTF-8"?>
<record_update sys_domain="global" table="sys_script">
    <sys_script action="INSERT_OR_UPDATE">
        <abort_action>false</abort_action>
        <access>package_private</access>
        <action_delete>false</action_delete>
        <action_insert>true</action_insert>
        <action_label/>
        <action_name/>
        <action_query>false</action_query>
        <action_run_at>server</action_run_at>
        <action_update>true</action_update>
        <active>true</active>
        <add_message>false</add_message>
        <advanced>true</advanced>
        <application/>
        <change_fields>false</change_fields>
        <client_callable>false</client_callable>
        <collection>x_casus_printsmart_supply_orders</collection>
        <condition/>
        <description/>
        <execute_function>false</execute_function>
        <filter_condition/>
        <is_rest>false</is_rest>
        <message/>
        <name>Update Supplies Ordered</name>
        <onclick/>
        <order>100</order>
        <priority>100</priority>
        <read_access_action>false</read_access_action>
        <rest_method/>
        <rest_method_text/>
        <rest_service/>
        <rest_service_text/>
        <rest_variables/>
        <role_conditions/>
        <script><![CDATA[(function executeRule(current, previous /*null when async*/) {
	/* Update the supply quantity when a new supply is ordered*/
	
	var dateReceived = new GlideDate().getDisplayValue();
	
	// get the supply record from this table's supply type; it will be updated regardless
	var supply = new GlideRecord('x_casus_printsmart_supplies');
	supply.get(current.supply_type); //type matches type
	
	if(supply) { //supply is found; should always be found
	// when a new supply is ordered, tick the 'additional supplies ordered' boolean on the supplies table
		if(current.received == false) {
			supply.additional_supplies_ordered = true; //don't do anything major, just change boolean
			supply.update();
			
			gs.addInfoMessage("Order for " + current.supply_type.getDisplayValue() + " supplies successfully logged.");
		}
	// after a new supply is received, update the supply quantity on the supply table, then untick the boolean that supplies are ordered
		else {
			supply.additional_supplies_ordered = false; //remove ordered flag
			supply.update();  
			
			//supply is received, create new receipt record to log a new supply is received, rather than inserting the record directly
			var supplyReceipt = new GlideRecord("x_casus_printsmart_supplies_received");
			supplyReceipt.initialize();
			
			supplyReceipt.supply_type = current.supply_type; 
			supplyReceipt.quantity_received = current.amount_ordered;
			supplyReceipt.insert(); // will run another business rule to update the supplies on supply table (to leave a record)			
			
			//deactivate the current record
			current.active = false;
			current.date_received = dateReceived;
			current.update();
		}
	}
})(current, previous);]]></script>
        <sys_class_name>sys_script</sys_class_name>
        <sys_created_by>nicholasmyers</sys_created_by>
        <sys_created_on>2017-01-27 22:46:58</sys_created_on>
        <sys_customer_update>true</sys_customer_update>
        <sys_domain>global</sys_domain>
        <sys_id>c07c0b826fa87a00ad6cd4a21c3ee479</sys_id>
        <sys_mod_count>8</sys_mod_count>
        <sys_name>Update Supplies Ordered</sys_name>
        <sys_overrides/>
        <sys_package display_value="PrintSmart Inventory Management" source="x_casus_printsmart">3aaadc790fe7ea0012e4348ce1050e16</sys_package>
        <sys_policy/>
        <sys_replace_on_upgrade>false</sys_replace_on_upgrade>
        <sys_scope display_value="PrintSmart Inventory Management">3aaadc790fe7ea0012e4348ce1050e16</sys_scope>
        <sys_update_name>sys_script_c07c0b826fa87a00ad6cd4a21c3ee479</sys_update_name>
        <sys_updated_by>nicholasmyers</sys_updated_by>
        <sys_updated_on>2017-01-27 23:31:17</sys_updated_on>
        <template/>
        <when>after</when>
    </sys_script>
</record_update>
