<?xml version="1.0" encoding="UTF-8"?>
<record_update table="sys_ui_script">
    <sys_ui_script action="INSERT_OR_UPDATE">
        <active>true</active>
        <description/>
        <global>false</global>
        <name>x_casus_printsmart.angular_controller</name>
        <script><![CDATA[var myApp = angular.module('myApp', []);
var supplyReferences = [];  //Holds all supplies (Global)
supplyReferences = getSupplyReferences();


// - - - Begin Factory Service - - - //
myApp.factory('suppliesFactory', function() {

	function getSupply() {
		return suppliesList;
	}
	
	var service = {
		getSupply: getSupply
	};
	return service;
}) // - - - End Factory - - - //


// - - - Begin Controller - - - //
.controller('SuppliesReceived', ['$scope', function ($scope, suppliesFactory) {
    
	$scope.data = {};//Master object to hold data
	$scope.max = 6;//Max number of data allowed
	$scope.currentDate = new Date(getCurrentDate());//Date object of current date
	$scope.async = 0;
	$scope.suppliesAll = [];
	$scope.data.supply = [{//Holds data that we will send to server for insert
		"supply_type": "",
		"quantity_received": "",
		"received_date": ""
	}];
	//Set default to current date
	$scope.data.supply[0].received_date = $scope.currentDate;
	$scope.suppliesAll = supplyReferences;//getSupplyReferences();
	$scope.async = 1;
	// - - - -End Init - - - -//
	
	
	//This adds another panel for users to input additional data.
	$scope.addAdditionalData = function () {
		//Make sure we haven't maxxed out num of allowed data
		if ($scope.data.supply.length < $scope.max) {
			//Create blank data
			var newSupply = { 
				"supply_type": "",
				"quantity_received": "",
				"received_date": ""	
			};
			newSupply.received_date = $scope.currentDate;
			$scope.data.supply.push(newSupply);
			$scope.focusIndex = $scope.data.supply.length-1;//Used for auto focus field
			return true;
		} else {
			//Too many data already added, can't add more
			alert("Supply limit reached.");
			return false;
		}	
	};
	//This deletes the panel and it's information.
	$scope.close = function(index) {
		//Removes the data from array, thus removing the html elements
		$scope.data.supply.splice(index,1);
	};
	
	//Calls script include to submit records manually
	$scope.submitAll = function () {
		console.log($scope.data.supply);//Test
		//Loop through each data, call server to submit
		for (var i = 0; i < $scope.data.supply.length; i++) {
			var supType = $scope.data.supply[i].supply_type;
			var supID;
			var date = new Date($scope.data.supply[i].received_date);
			var supDate = date.toISOString();
			supDate = supDate.substr(0,10);//Get the first few characters, removing extra stuff
			var supQuantity = $scope.data.supply[i].quantity_received;
			//Loop for supplies looking for matching supply_type - Should be better way but oh well
			for (var j = 0; j < $scope.suppliesAll.length; j++) {
				if (supType == $scope.suppliesAll[j].supply_type) {
					supID = $scope.suppliesAll[j].sys_id;
					break;
				}
			}//End inner for loop
			
			//Call to server to actually submit
			var ajax = new GlideAjax('x_casus_printsmart.submitMultiple');
			ajax.addParam('sysparm_name','submitSupplyReceived');
			ajax.addParam('sysparm_supply_type', supID);
			ajax.addParam('sysparm_quantity_received', supQuantity);
			ajax.addParam('sysparm_received_date', supDate);
			ajax.getXML(function ()  {
			});
		}//End outer for loop
		//Redirect user
		var url = location.hostname;
		window.location = url + '/x_casus_printsmart_supplies_received_list.do';
	};

	
}])// - - -END Controller- - - //

// - - - Begin Controller - - - //
.controller('SuppliesOrdered', ['$scope', function ($scope, suppliesFactory) {
    
	$scope.data = {};//Master object to hold data
	$scope.max = 6;//Max number of data allowed
	$scope.currentDate = new Date(getCurrentDate());//Date object of current date
	$scope.async = 0;
	$scope.suppliesAll = [];
	$scope.data.supply = [{//Holds data that we will send to server for insert
		"supply_type": "",
		"amount_ordered": "",
		"ordered": ""
	}];
	//Set default to current date
	$scope.data.supply[0].ordered = $scope.currentDate;
	$scope.suppliesAll = supplyReferences;//getSupplyReferences();
	$scope.async = 1;
	// - - - -End Init - - - -//
	
	
	//This adds another panel for users to input additional data.
	$scope.addAdditionalData = function () {
		//Make sure we haven't maxxed out num of allowed data
		if ($scope.data.supply.length < $scope.max) {
			//Create blank data
			var newSupply = { 
				"supply_type": "",
				"amount_ordered": "",
				"ordered": ""	
			};
			newSupply.ordered = $scope.currentDate;
			$scope.data.supply.push(newSupply);
			$scope.focusIndex = $scope.data.supply.length-1;//Used for auto focus field
			return true;
		} else {
			//Too many data already added, can't add more
			alert("Supply limit reached.");
			return false;
		}	
	};
	//This deletes the panel and it's information.
	$scope.close = function(index) {
		//Removes the data from array, thus removing the html elements
		$scope.data.supply.splice(index,1);
	};
	
	//Calls script include to submit records manually
	$scope.submitAll = function () {
		console.log($scope.data.supply);//Test
		//Loop through each data, call server to submit
		for (var i = 0; i < $scope.data.supply.length; i++) {
			var supType = $scope.data.supply[i].supply_type;
			var supID;
			var date = new Date($scope.data.supply[i].ordered);
			var supDate = date.toISOString();
			supDate = supDate.substr(0,10);//Get the first few characters, removing extra stuff
			var supQuantity = $scope.data.supply[i].amount_ordered;
			//Loop for supplies looking for matching supply_type - Should be better way but oh well
			for (var j = 0; j < $scope.suppliesAll.length; j++) {
				if (supType == $scope.suppliesAll[j].supply_type) {
					supID = $scope.suppliesAll[j].sys_id;
					break;
				}
			}//End inner for loop
			
			//Call to server to actually submit
			var ajax = new GlideAjax('x_casus_printsmart.submitMultiple');
			ajax.addParam('sysparm_name','submitSupplyOrder');
			ajax.addParam('sysparm_supply_type', supID);
			ajax.addParam('sysparm_amount_ordered', supQuantity);
			ajax.addParam('sysparm_ordered', supDate);
			ajax.getXML(function ()  {
			});
		}//End outer for loop
		//Redirect user
		var url = location.hostname;
		window.location = url + '/x_casus_printsmart_supply_orders_list.do';
	};

	
}])// - - -END Controller- - - //

// - - - Begin Controller - - - //
.controller('SuppliesDelivered', ['$scope', function ($scope) {
    
	$scope.data = {};//Master object to hold data
	$scope.max = 6;//Max number of data allowed
	$scope.currentDate = new Date(getCurrentDate());//Date object of current date
	$scope.async = 0;
	$scope.suppliesAll = [];
	$scope.data.supply = [{//Holds data that we will send to server for insert
		"supply_type": "",
		"location": "",
		"amount_of_boxes_delivered": "",
		"delivered": ""
	}];
	//Set default to current date
	$scope.data.supply[0].delivered = $scope.currentDate;
	$scope.suppliesAll = supplyReferences;//getSupplyReferences();
	$scope.async = 1;
	// - - - -End Init - - - -//
	
	
	//This adds another panel for users to input additional data.
	$scope.addAdditionalData = function () {
		//Make sure we haven't maxxed out num of allowed data
		if ($scope.data.supply.length < $scope.max) {
			//Create blank data
			var newSupply = { 
				"supply_type": "",
				"location": "",
				"amount_of_boxes_delivered": "",
				"delivered": ""	
			};
			newSupply.delivered = $scope.currentDate;
			$scope.data.supply.push(newSupply);
			$scope.focusIndex = $scope.data.supply.length-1;//Used for auto focus field
			return true;
		} else {
			//Too many data already added, can't add more
			alert("Supply limit reached.");
			return false;
		}	
	};
	//This deletes the panel and it's information.
	$scope.close = function(index) {
		//Removes the data from array, thus removing the html elements
		$scope.data.supply.splice(index,1);
	};
	
	//Calls script include to submit records manually
	$scope.submitAll = function () {
		console.log($scope.data.supply);//Test
		//Loop through each data, call server to submit
		for (var i = 0; i < $scope.data.supply.length; i++) {
			console.log(i);
			var supType = $scope.data.supply[i].supply_type;
			var supID;
			var supLocation;//TODO
			var date = new Date($scope.data.supply[i].delivered);
			var supDate = date.toISOString();
			supDate = supDate.substr(0,10);//Get the first few characters, removing extra stuff
			var supQuantity = $scope.data.supply[i].amount_of_boxes_delivered;
			//Loop for supplies looking for matching supply_type - Should be better way but oh well
			for (var j = 0; j < $scope.suppliesAll.length; j++) {
				if (supType == $scope.suppliesAll[j].supply_type) {
					supID = $scope.suppliesAll[j].sys_id;
					break;
				}
			}//End inner for loop
			
			//Call to server to actually submit
			var ajax = new GlideAjax('x_casus_printsmart.submitMultiple');
			ajax.addParam('sysparm_name','submitSupplyDelivery');
			ajax.addParam('sysparm_supply_type', supID);
			//ajax.addParam('sysparm_location', supLocation); //TODO
			ajax.addParam('sysparm_amount_of_boxes_delivered', supQuantity);
			ajax.addParam('sysparm_delivered', supDate);
			ajax.getXML(function ()  {
			});
		}//End outer for loop
		//Redirect user
		var url = location.hostname;
		window.location = url + '/x_casus_printsmart_supply_orders_list.do';
	};

	
}])// - - -END Controller- - - //

/* This is used to autofocus the first field after dynamically adding a new obj
Place custom-autofocus html attribute into the desired field like so custom-autofocus="$index == focusIndex"
Must be used in ng-repeat
*/
.directive('customAutofocus', function() {
  return{
         restrict: 'A',

         link: function(scope, element, attrs){
           scope.$watch(function(){
             return scope.$eval(attrs.customAutofocus);
             },function (newValue){
               if (newValue == true){
                   element[0].focus();
               }
           });
         }
     };
})//End Directive//

/* Provides autopopulated dropdown menu. 
*/
.directive('customDropdown', function() {
	return {
		restrict: 'C',
		template : 
			'<datalist id="supplyList">' +
			'<div ng-repeat="sup in suppliesAll track by $index">' +
				'<option value="{{sup.supply_type}}">' + 
			'</div>' +
			'</datalist>'
	};
})//- - End Directive - - //

;//- - - - -End App- - - - -//


// - - - Handlers and Other Functions - - - //

//Handles the XML call that retrieves supply sys_ids and supply_types
//Assigns them to dat global supplyReferences 
function handleSupplyReferences(response) {
	var supplies = response.responseXML.getElementsByTagName("supply");
	for (var i = 0; i < supplies.length; i++ ) {
		//Temp object to push
		var supRef = {
			"sys_id":"",
			"supply_type":""
		};
		//Fill temp obj with values from XML
		supRef.sys_id = supplies[i].getAttribute("sys_id");
		supRef.supply_type = supplies[i].getAttribute("supply_type");
		supplyReferences.push(supRef);
	}//End For
	
}
/*
Uses a global variable to store all the supplies
*/
function getSupplyReferences() {
	var ajax = new GlideAjax('x_casus_printsmart.submitMultiple');
	ajax.addParam('sysparm_name','getSupplyTableReferences');
	ajax.getXML(handleSupplyReferences);
	ajax.getXMLWait();
	//Now the supply references should have data (sys_id and supply_type)
	return supplyReferences;
}

function getCurrentDate() {
	var date;
	var ajax = new GlideAjax('x_casus_printsmart.submitMultiple');
	ajax.addParam('sysparm_name','nowDateTime');
	ajax.getXML(function ()  {
		date = ajax.getAnswer();	
	});
	ajax.getXMLWait();
	//Date is weird, this replaces hyphens with slashes, which gives proper date
	return date.replace(/-/g, '\/');
}]]></script>
        <script_name>angular_controller</script_name>
        <sys_class_name>sys_ui_script</sys_class_name>
        <sys_created_by>gg622</sys_created_by>
        <sys_created_on>2017-04-17 20:33:53</sys_created_on>
        <sys_customer_update>true</sys_customer_update>
        <sys_id>f46f26730f02b24012e4348ce1050e96</sys_id>
        <sys_mod_count>147</sys_mod_count>
        <sys_name>x_casus_printsmart.angular_controller</sys_name>
        <sys_package display_value="PrintSmart Inventory Management" source="x_casus_printsmart">3aaadc790fe7ea0012e4348ce1050e16</sys_package>
        <sys_policy/>
        <sys_replace_on_upgrade>false</sys_replace_on_upgrade>
        <sys_scope display_value="PrintSmart Inventory Management">3aaadc790fe7ea0012e4348ce1050e16</sys_scope>
        <sys_update_name>sys_ui_script_f46f26730f02b24012e4348ce1050e96</sys_update_name>
        <sys_updated_by>gg622</sys_updated_by>
        <sys_updated_on>2017-05-03 20:14:46</sys_updated_on>
        <use_scoped_format>false</use_scoped_format>
    </sys_ui_script>
</record_update>
